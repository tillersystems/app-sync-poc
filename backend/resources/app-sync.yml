Resources:
  TaskTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: ${self:custom.stage}-task-table
    DependsOn: AppSyncAPI

  AppSyncAPI:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
      Name: ${self:custom.stage}-app-sync-api
      AuthenticationType: "AMAZON_COGNITO_USER_POOLS"
      UserPoolConfig:
        UserPoolId: !Ref CognitoUserPool
        AwsRegion: !Ref "AWS::Region"
        DefaultAction: ALLOW

  AppSyncSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    DependsOn:
      - AppSyncAPI
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Definition: |
        type Mutation {
          # In this example, only users in the AdminGroup can create tasks
          createTask(
            owner: String!,
            title: String!,
            taskStatus: String!,
            description: String!
          ): Task
            @aws_auth(cognito_groups: ["AdminGroup"])
          # Both Employees and Managers can update a task's status
          updateTaskStatus(id: ID!, taskStatus: String!): Task
            @aws_auth(cognito_groups: ["UserGroup","AdminGroup"])
        }

        type Query {
          # Users belonging to both EmployeesGroup and ManagerGroup can read a particular task
          getTask(id: ID!): Task
            @aws_auth(cognito_groups: ["UserGroup","AdminGroup"])
          # Only Managers can list all the Tasks
          allTasks(nextToken: String): TaskConnection
            @aws_auth(cognito_groups: ["AdminGroup"])
        }

        type Task {
          id: ID!
          owner: String!
          title: String!
          description: String!
          taskStatus: String
        }

        type TaskConnection {
          items: [Task]
          nextToken: String
        }

        schema {
          query: Query
          mutation: Mutation
        }

  AppSyncGroupsAuthSampleDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "AppSyncGroupsSampleDDBRole-${self:custom.stage}"
      ManagedPolicyArns:
        - Ref: AppSyncGroupsAuthSampleDynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncGroupsAuthSampleDynamoDBPolicy

  AppSyncGroupsAuthSampleDynamoDBPolicy: 
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      Description: "Managed policy to allow AWS AppSync to access the tables created by this template."
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource:
              - Fn::Join:
                - ""
                - - Fn::GetAtt: TaskTable.Arn
                  - "*"
    DependsOn:
      - TaskTable

  AppSyncDDBDataSource:
    Type: "AWS::AppSync::DataSource"
    DependsOn:
      - AppSyncAPI
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: TaskDynamoDataSource${self:custom.stage}
      Description: "A DataSource for Tasks in DynamoDB."
      Type: "AMAZON_DYNAMODB"
      ServiceRoleArn: !GetAtt AppSyncGroupsAuthSampleDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref "AWS::Region"
        TableName: !Ref TaskTable
        UseCallerCredentials: false

  AppSyncResolverAllTasks:
    Type: "AWS::AppSync::Resolver"
    DependsOn:
      - AppSyncSchema
      - AppSyncDDBDataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: "Query"
      FieldName: "allTasks"
      DataSourceName: !GetAtt AppSyncDDBDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Scan"
            ,"limit": 15
            #if( ${!context.arguments.nextToken} )
                ,"nextToken": "${!context.arguments.nextToken}"
            #end
        }
      ResponseMappingTemplate: |
        {
            "items": $utils.toJson($context.result.items)
            #if( ${!context.result.nextToken} )
                ,"nextToken": "${!context.result.nextToken}"
            #end
        }

  AppSyncResolverGetTask:
    Type: "AWS::AppSync::Resolver"
    DependsOn:
      - AppSyncSchema
      - AppSyncDDBDataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: "Query"
      FieldName: "getTask"
      DataSourceName: !GetAtt AppSyncDDBDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
                "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AppSyncResolverUpdateTaskStatus:
    Type: "AWS::AppSync::Resolver"
    DependsOn:
      - AppSyncSchema
      - AppSyncDDBDataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: "Mutation"
      FieldName: "updateTaskStatus"
      DataSourceName: !GetAtt AppSyncDDBDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "UpdateItem",
            "key" : {
                "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            },
            "update" : {
                "expression" : "SET taskStatus = :taskStatus",
                "expressionValues": {
                    ":taskStatus" : { "S": "${!context.arguments.taskStatus}" }
                }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AppSyncResolverCreateTask:
    Type: "AWS::AppSync::Resolver"
    DependsOn:
      - AppSyncSchema
      - AppSyncDDBDataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: "Mutation"
      FieldName: "createTask"
      DataSourceName: !GetAtt AppSyncDDBDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "PutItem",
            "key" : {
                ## If object "id" should come from GraphQL arguments,
                ## change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
                "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
            },
            "attributeValues" : {
                "owner": { "S" : "${!context.arguments.owner}" },
                "title": { "S" : "${!context.arguments.title}" },
                "description": { "S" : "${!context.arguments.description}" },
                "taskStatus": { "S" : "${!context.arguments.taskStatus}" }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
